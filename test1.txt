1.	How do we measure the length of the critical rendering path? (10 pts)
    i.	The number of server round trips your page must do in order to fully load and render
    ii.	The number of actions the browser must take (eg run js, build cssom, build dom, etc) in order to fully load and render your page
    iii.By counting the number of all external resources that must be loaded
    iv.	By counting the number of render-blocking external resources that must be loaded

    Answer: i

2.	What are the events in the Timeline pane which show the DOM being built, the CSSOM being built, and the render tree being built? 
    i.	Parse HTML, Parse CSS, Layout
    ii.	Parse HTML, Recalculate Style, Layout
    iii.Parse HTML, Recalculate Style, Paint

    Answer: i

3.	What is the render tree? (10 pts)

    Answer: The DOM and CSSOM trees are combined to form the render tree. The render tree has all of the visible DOM content 
    on the page and all the CSSOM style information for each node while ignoring non-visible or hidden nodes 
    (i.e. meta tags, display: none elements). The final output is a render that contains both the content and style information 
    of all the visible content on the screen. With the render tree in place, we can proceed to the "layout" stage.

4.	What are three things you can do in order to speed up a website's load time? (10 pts)

    Answer: 
    1. Use media queries to specify which CSS and HTML elements to use for a given screen and/or screen orientation.
    2. Minify JavaScript code and put it in an external file.
    3. Use Sprites and smaller fast loading jpeg image files when possible so there is less fetching and rendering time is decreased.

5.	What is the name of the Google tool you can use to see a list of things you can do to improve your page's load speed? (10 pts)
    
    Answer: 
    Googleâ€™s PageSpeed Insights
    Google Analytics Site Speed if you have Google Analytics installed

6.	What is the purpose of including multiple <source> elements within a single <video> element?
    
    Answer: 
    Video format support varies amongst browsers. Including several source elements will allow the browser to pick the one that 
    it needs to play the file.

7.	Use webpack to bundle all the files in the following project: https://github.com/Swolebrain/connect4 Setup Steps:
    i.	Fork the project by going to the above link and clicking "Fork" near the top right of the screen
    ii.	The project will now have a copy in your own github page. Clone it from there.
    iii.In your computer, initialize this folder as a node project.
    iv.	Install webpack, webpack dev server, and make sure they are saved as development dependencies in package.json
    v.	Split out the code from the createTable function and the isLegitEdge function into separate files. Make sure each function has its own file.
    vi.	Back in your main file, require/import the contents of your two new files
    vii.Create an npm script to use webpack to fire the dev server and create a javascript bundle (one single file containing all your JS).
    viii.Do anything else you need to do in order to get the bundle working and test your site.
    ix.	Before submitting, ensure your code is bundled into one file.
    x.	Commit and push to github
    xi.	Upload the game to yourname.fvi-grad.com

    Answer: https://github.com/lmichelletech/connect4
            http://lmichelle.fvi-grad.com/connect4/

8.	Bonus points: Produce a minified bundle for the exercise above using an uglify plugin.

    Answer: Completed and pushed/uploaded titled bundle.min.js




